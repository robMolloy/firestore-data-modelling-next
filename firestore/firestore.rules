rules_version = '2';

function isNow(dt) {
  return dt is timestamp && dt == request.time;
}
function getIncomingAuth() {
  return request.auth;
}
function getIncomingId() {
  return request.resource.id;
}
function getIncomingData() {
  return request.resource.data;
}
function getExistingData() {
  return resource.data;
}
function getParams() {
  return resource.data;
}

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow get, list, create, update, delete: if false;
    }
    
    function getTodoGroupDoc(orgUserLinkId){
      return get(/databases/$(database)/documents/todoGroups/$(orgUserLinkId)).data;
    }

    match /randomCollection/{document=**} {
      allow get, list, create, update, delete: if false;
    }
    match /publicNotices/{document=**} {
      allow get: if true; // PN.G.0.A
      allow list: if true; // PN.L.0.A
      allow create: if false; // PN.C.0.D
      allow update: if false; // PN.U.0.D
      allow delete: if false; // PN.D.0.D
    }
    match /memberNotices/{document=**} {
      function canGetMemberNotices(){
        // MN.G.0.A
        return getIncomingAuth() != null; // MN.G.1.D
      }
      function canListMemberNotices(){
        // MN.L.0.A
        return getIncomingAuth() != null; // MN.L.1.D
      }
      allow get: if canGetMemberNotices();
      allow list: if canListMemberNotices();
      allow create: if false; // MN.C.0.D
      allow update: if false; // MN.U.0.D
      allow delete: if false; // MN.D.0.D
    }
    match /userTodos/{document=**} {
      function getUserTodosKeys(){
        return ['id', 'uid', 'task', 'completed', 'createdAt', 'updatedAt'];
      }
      function canGetUserTodo(){
        // UT.G.0.A
        return getIncomingAuth().uid == getExistingData().uid; // UT.G.1.D - UT.G.1.D.unauth, UT.G.1.D.wrongUser
      } 
      function canListUserTodo(){
        // UT.L.0.A
        return getIncomingAuth().uid == getParams().uid; // UT.L.1.D - UT.L.1.D.unauth, UT.L.1.D.wrongUser
      } 
      function canCreateUserTodo(){
        let incoming = getIncomingData();
        let keys = getUserTodosKeys();
        // UT.C.0.A
        return incoming.keys().hasAll(keys) // UT.C.1.D
          && incoming.keys().hasOnly(keys) // UT.C.2.D
          && getIncomingId() == incoming.id // UT.C.3.D
          && isNow(incoming.createdAt) // UT.C.4.D
          && isNow(incoming.updatedAt) // UT.C.5.D
          && getIncomingAuth().uid == incoming.uid // UT.C.6 - UT.C.6.D.unauth,  UT.C.6.D.wrongUser
      }
      function canUpdateUserTodo(){
        let incoming = getIncomingData();
        let existing = getExistingData();
        let keys = getUserTodosKeys();
        // UT.U.0.A
        return incoming.diff(existing).affectedKeys().hasOnly(['task', 'completed', 'updatedAt']) // UT.U.1.D
          && incoming.keys().hasAll(keys) // UT.U.2.D
          && incoming.keys().hasOnly(keys) // UT.U.3.D
          && isNow(incoming.updatedAt) // UT.U.4.D
          && getIncomingAuth().uid == existing.uid // UT.U.5.D - UT.U.5.D.unauth,  UT.U.5.D.wrongUser
      }
      function canDeleteUserTodo(){
        // UT.D.0.A
        return getIncomingAuth().uid == getParams().uid; // UT.D.1.D - UT.D.1.D.unauth, UT.D.1.D.wrongUser
      }
      allow get: if canGetUserTodo();
      allow list: if canListUserTodo();
      allow create: if canCreateUserTodo();
      allow update: if canUpdateUserTodo();
      allow delete: if canDeleteUserTodo();
    }
    match /todoGroups/{document=**} {
      function getTodoGroupsKeys(){
        return ['id', 'uids', 'name', 'createdAt', 'updatedAt'];
      }
      function canGetTodoGroup(){
        // TG.G.0.A
        return true
      }
      function canCreateTodoGroup(){
        let incoming = getIncomingData();
        let keys = getTodoGroupsKeys();
        // TG.C.0.A
        return incoming.keys().hasAll(keys) // TG.C.1.D
          && incoming.keys().hasOnly(keys) // TG.C.2.D
          && getIncomingId() == incoming.id // TG.C.3.D
          && isNow(incoming.createdAt) // TG.C.4.D
          && isNow(incoming.updatedAt) // TG.C.5.D
          && getIncomingAuth().uid in incoming.uids // TG.C.6 - TG.C.6.D.unauth,  TG.C.6.D.wrongUser
      }
      allow get: if canGetTodoGroup();
      allow create: if canCreateTodoGroup();
      
      allow list: if false; // TG.L.0.D
      allow update: if false; // TG.U.0.D
      allow delete: if false; // TG.D.0.D
    }
    match /groupTodos/{document=**} {
      function getGroupTodosKeys(){
        return ['id', 'todoGroupId', 'task', 'completed', 'createdAt', 'updatedAt'];
      }
      function canGetGroupTodo(){
        // GT.G.0.A
        return true
      }
      function canCreateGroupTodo(){
        let incoming = getIncomingData();
        let keys = getGroupTodosKeys();
        let todoGroupDoc = getTodoGroupDoc(incoming.todoGroupId);
        // GT.C.0.A
        return incoming.keys().hasAll(keys) // GT.C.1.D
          && incoming.keys().hasOnly(keys) // GT.C.2.D
          && getIncomingId() == incoming.id // GT.C.3.D
          && isNow(incoming.createdAt) // GT.C.4.D
          && isNow(incoming.updatedAt) // GT.C.5.D
          && getIncomingAuth().uid in todoGroupDoc.uids // GT.C.6 - GT.C.6.D.unauth,  GT.C.6.D.wrongUserTodoGroup, GT.C.6.D.missingTodoGroup
      }
      allow get: if canGetGroupTodo();
      allow create: if canCreateGroupTodo();
      
      allow list: if false; // GT.L.0.D
      allow update: if false; // GT.U.0.D
      allow delete: if false; // GT.D.0.D
    }
  }
}