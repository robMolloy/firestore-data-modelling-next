rules_version = '2';

function isNow(dt) {
  return dt is timestamp && dt == request.time;
}
function getIncomingAuth() {
  return request.auth;
}
function getIncomingId() {
  return request.resource.id;
}
function getIncomingData() {
  return request.resource.data;
}
function getExistingData() {
  return resource.data;
}

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow get, list, create, update, delete: if false;
    }
    match /randomCollection/{document=**} {
      allow get, list, create, update, delete: if false;
    }
    match /publicNotices/{document=**} {
      allow get: if true;
      allow list, create, update, delete: if false;
    }
    match /memberNotices/{document=**} {
      allow get: if getIncomingAuth() != null;
      allow list, create, update, delete: if false;
    }
    match /userTodos/{document=**} {
      function getUserTodosKeys(){
        return ['id', 'uid', 'task', 'completed', 'createdAt', 'updatedAt'];
      }
      function canGetUserTodo(){
        return getIncomingAuth().uid == getExistingData().uid;
      } 
      function canCreateUserTodo(){
        let incoming = getIncomingData();
        let keys = getUserTodosKeys();
        return incoming.keys().hasAll(keys)
          && incoming.keys().hasOnly(keys)
          && getIncomingId() == incoming.id
          && isNow(incoming.createdAt)
          && isNow(incoming.updatedAt)
          && getIncomingAuth().uid == incoming.uid;
      }
      function canUpdateUserTodo(){
        let incoming = getIncomingData();
        let existing = getExistingData();
        let keys = getUserTodosKeys();
        return incoming.diff(existing).affectedKeys().hasOnly(['task', 'completed', 'updatedAt']) // UTU0
          && incoming.keys().hasOnly(keys) // UTU1
          && incoming.keys().hasAll(keys) // UTU2
          && isNow(incoming.updatedAt) // UTU3
          && getIncomingAuth().uid == existing.uid // UTU4
      }
      allow get: if canGetUserTodo();
      allow create: if canCreateUserTodo();
      allow update: if canUpdateUserTodo();
      // allow list, create, update, delete: if false;
    }
  }
}